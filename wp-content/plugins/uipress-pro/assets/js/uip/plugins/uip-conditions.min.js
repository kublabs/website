export function moduleData(){return{props:{returnData:Function,value:Array,placeHolder:String,args:Object,size:String},inject:["uipress"],data:function(){return{option:{relation:"and",conditions:[]},strings:{newCondition:__("New condition","uipress-pro"),type:__("Type","uipress-pro"),operator:__("Operator","uipress-pro"),searchUsers:__("Search","uipress-pro"),value:__("Value","uipress-lite"),addCondition:__("Add condition","uipress-lite")},newCondition:{type:"userrole",operator:"is",value:""},conditions:{relations:{and:{value:"and",label:__("And","uipress-pro")},or:{value:"or",label:__("Or","uipress-pro")}},types:[{value:"userrole",label:__("User role","uipress-pro")},{value:"userlogin",label:__("User login","uipress-pro")},{value:"userid",label:__("User ID","uipress-pro")},{value:"useremail",label:__("User email","uipress-pro")}],operators:{is:{value:"is",label:__("Is","uipress-pro")},isnot:{value:"isnot",label:__("Is not","uipress-pro")}}}}},mounted:function(){this.processValue(this.value)},watch:{option:{handler(e,i){this.returnData(this.option)},deep:!0}},methods:{processValue(e){void 0!==e&&(this.uipress.isObject(e)&&(this.option={...this.option,...e}),Array.isArray(e)&&(this.option.conditions=e))},addCondition(){this.option.conditions.push(JSON.parse(JSON.stringify(this.newCondition)))},removeCondition(e){this.option.conditions.splice(e,1)}},template:'\n\t\n\t<div class="uip-flex uip-w-100p uip-flex-column uip-row-gap-xs">\n\t     \n      <template v-for="(element, index) in option.conditions">\n      \n        <drop-down dropPos="left" class="uip-w-100p" triggerClass="uip-w-100p">\n          <template v-slot:trigger>\n            \n            <div class="uip-flex uip-flex-row uip-gap-xxs">\n              <div class="uip-padding-xxs uip-border-rounder uip-text-s uip-background-muted uip-flex-grow">\n                {{element.type}} {{element.operator}} {{element.value}}\n              </div>\n              \n              <button class="uip-button-default uip-border-rounder uip-icon uip-padding-xxs uip-link-muted"\n              @click="removeCondition(index)">close</button>\n            </div>  \n            \n          </template>\n          <template v-slot:content>\n            <div class="uip-padding-s">\n            \n              <div class="uip-grid-col-1-3">\n              \n                  <div class="uip-text-muted uip-flex uip-flex-center"><span>{{strings.type}}</span></div>\n                  <div class="uip-flex uip-flex-center">\n                    <select class="uip-input-small uip-padding-top-xxxs uip-padding-bottom-xxxs uip-max-w-100p uip-w-100p uip-border-rounder" v-model="element.type" style="padding-top: 2px; padding-bottom: 2px; border-radius: var(--uip-border-radius-large);">\n                      <template v-for="item in conditions.types">\n                        <option :value="item.value">{{item.label}}</option>\n                      </template>\n                    </select>\n                  </div>\n                  \n                  <div class="uip-text-muted uip-flex uip-flex-center"><span>{{strings.operator}}</span></div>\n                  <div class="uip-flex uip-flex-center">\n                    <toggle-switch :options="conditions.operators" :activeValue="element.operator" :returnValue="function(data){ element.operator = data;}"></toggle-switch>\n                  </div>\n                  \n                  <div class="uip-text-muted uip-flex uip-flex-center"><span>{{strings.value}}</span></div>\n                  <div class="uip-flex uip-flex-center uip-gap-xxs">\n                    <input type="text" class="uip-input-small uip-flex-grow" style="min-width:1px" v-model="element.value">\n                    <user-role-search :selected="[]" :returnType="element.type" :searchPlaceHolder="strings.searchUsers" :updateSelected="function(d){element.value = d}"></user-role-search>\n                  </div>\n                  \n              </div>    \n              \n            </div>\n            \n          </template>\n        </drop-down>\n      \n      </template>\n      \n      <toggle-switch v-if="option.conditions.length > 0" :options="conditions.relations" :activeValue="option.relation" :dontAccentActive="true" :returnValue="function(data){ option.relation = data;}"></toggle-switch> \n      \n      <div @click="option.conditions.push(newCondition)" class="uip-padding-xxs uip-border-rounder uip-background-muted hover:uip-background-grey uip-cursor-pointer uip-flex uip-flex-middle uip-flex-center uip-gap-xs uip-flex-grow">\n        <span class="uip-icon">add</span>\n      </div>\n\t  \n\t  \n\t</div>'}};