export function moduleData(){return{props:{selected:Array,name:String,placeholder:String,single:Boolean,translations:Object,updateRoles:Function},data:function(){return{thisSearchInput:"",options:[],selectedOptions:this.selected,ui:{dropOpen:!1}}},computed:{formattedOptions(){return this.options}},watch:{selectedOptions:{handler(e,i){this.updateRoles(this.selectedOptions)},deep:!0}},inject:["uipress"],methods:{getPostTypes(){self=this;let e=new FormData;e.append("action","uip_get_user_roles_for_user_management"),e.append("security",uip_ajax.security),self.uipress.callServer(uip_ajax.ajax_url,e).then(e=>{self.options=e.roles})},addSelected(e,i){this.ifSelected(e,i)?this.removeSelected(e,i):1==this.single?i[0]=e:i.push(e)},removeSelected(e,i){let t=i.indexOf(e);t>-1&&(i=i.splice(t,1))},ifSelected:(e,i)=>i.indexOf(e)>-1,ifInSearch(e,i){let t=e.toLowerCase(),n=i.toLowerCase();return!!t.includes(n)},onClickOutside(e){const i=e.path||(e.composedPath?e.composedPath():void 0);!i||i.includes(this.$el)||this.$el.contains(e.target)||this.closeThisComponent()},openThisComponent(){this.ui.dropOpen=!0,this.getPostTypes(),requestAnimationFrame(()=>{document.documentElement.addEventListener("click",this.onClickOutside,!1)})},closeThisComponent(){this.ui.dropOpen=!1,document.documentElement.removeEventListener("click",this.onClickOutside,!1)}},template:'\n      \n      <div class="uip-position-relative" @click="openThisComponent">\n        <div class="uip-padding-xs hover:uip-background-muted uip-border uip-border-round uip-w-100p uip-cursor-pointer uip-border-box" :class="{\'uip-active-outline\' : ui.dropOpen}"> \n          <div class="uip-flex uip-flex-center">\n            <div class="uip-flex-grow uip-margin-right-s">\n              <div>\n                <span class="uk-text-meta">{{name}}...</span>\n              </div>\n            </div>\n            <span class="uip-icon uip-text-muted">add</span>\n            <span v-if="selectedOptions.length > 0" class="uip-text-inverse uip-background-primary uip-border-round uip-text-s uip-w-18 uip-margin-left-xxs uip-text-center">\n              {{selectedOptions.length}}\n            </span>\n          </div>\n        </div>\n        <div v-if="ui.dropOpen" class="uip-position-absolute uip-background-default uip-border-round uip-border uip-w-100p uip-border-box uip-z-index-9 uip-margin-top-xs uip-overflow-hidden uip-right-0">\n          <div class="uip-flex uip-background-default uip-padding-xs uip-border-bottom uip-flex-center">\n            <span class="uip-icon uip-text-muted uip-margin-right-xs uip-text-l">search</span>\n            <input class="uip-blank-input uip-flex-grow" type="search"  \n            :placeholder="placeholder" v-model="thisSearchInput" autofocus>\n          </div>\n          <div class="uip-max-h-280 uip-overflow-auto">\n            <template v-for="option in formattedOptions">\n              <div class="uip-background-default uip-padding-xs hover:uip-background-muted" \n              @click="addSelected(option.name, selectedOptions)" \n              v-if="ifInSearch(option.name, thisSearchInput)" \n              style="cursor: pointer">\n                <div class="uip-flex uip-flex-row uip-flex-center">\n                  <div class="uip-flex uip-flex-center uip-flex-middle uip-margin-right-xs">\n                    <input type="checkbox" class="uip-checkbox" :name="option.name" :value="option.name" :checked="ifSelected(option.name, selectedOptions)">\n                  </div>\n                  <div class="uip-flex-grow">\n                    <div class="uip-text-bold uip-text-emphasis">{{option.label}}</div>\n                    <div class="uip-text-muted">{{option.name}}</div>\n                  </div>\n                </div>\n              </div>\n            </template>\n          </div>\n        </div>\n      </div>'}};